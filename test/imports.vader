Given (an example of imports):
  package foo;
  
  import java.util.Arrays; 
  import java.util.List; 

  import org.apache.log4j.Logger;

  import org.apache.commons.lang3.StringUtils;

  public class FOO {
Execute (function to get the blocks):
  let blocks=imports#getblocks()
Then(Assert blocks are well defined):
  Assert stridx(blocks[0], "Arrays;") > -1
  Assert stridx(blocks[0], "java.util.List;") > -1
  Assert stridx(blocks[1], "Logger;") > -1
  Assert stridx(blocks[2], "StringUtils;") > -1
  Assert len(split(blocks[0], '#')) == 2

Given (some imports):
  package foo;
  
  import java.util.Arrays; 
  import java.util.List; 

  import org.apache.log4j.Logger;

  import org.apache.commons.lang3.StringUtils;

  public class FOO {
Execute (get import data):
  let imports = imports#import_data()
Then (import definition is accurate):
  Assert imports[0]['line'] == 3
  Assert imports[3]['line'] == 8
  Assert imports[0]['class'] == 'java.util.Arrays'
  Assert imports[3]['class'] == 'org.apache.commons.lang3.StringUtils'
   
Execute (define imports with context):
  let imports = [{'line': 3, 'class': 'java.util.Arrays'}]
  call add(imports, {'line': 4, 'class': 'java.util.List'})
  let context = imports#get_import_context(imports, 'java.util.Deque')
  let context_2 = imports#get_import_context(imports, 'java.util.Set')
  let context_3 = imports#get_import_context(imports, 'org.slf4j.Logger')
Then (correct context returned):
  Assert context['linebefore'] == 3
  Assert context['appendemptyline'] == 0
  Assert context_2['linebefore'] == 4
  Assert context_3['appendemptyline'] == 1
  Assert context_3['classtoinsert'] == 'org.slf4j.Logger'

Given (imports):
  package foo;
  import java.util.Arrays;
  import java.util.Dequeue;
  public class Foo {
Execute(insert imports correctly):
  call imports#insert_import_context({
    \ 'linebefore': 1,
    \ 'appendemptyline': 1,
    \ 'classtoinsert': 'org.junit.Ignore',
    \ 'dup': 0
    \ })
  call imports#insert_import_context({
    \ 'linebefore': 5,
    \ 'appendemptyline': 0,
    \ 'classtoinsert': 'org.log4j.Logger',
    \ 'dup': 0
    \ })
Expect:
  package foo;

  import org.junit.Ignore;
  import java.util.Arrays;
  import java.util.Dequeue;
  import org.log4j.Logger;
  public class Foo {

Given (example with dups):
  package foo
  
  import java.util.List;
  import java.util.HashSet;
  import java.util.Set;

  public class Foo {
  }

Execute (get context, then insert):
  let import_context = imports#get_import_context(imports#import_data(),
    \ 'java.util.Set')
  Assert import_context['dup'] == 1

Given (current complete example):
  package current.complete.example;

  import java.util.Arrays;
  import java.util.Collections;
  import java.util.HashSet;

  public class CompleteClazz {
  }
Execute (get context, then insert):
  let import_context = imports#get_import_context(imports#import_data(),
    \ 'java.util.Set')
  call imports#insert_import_context(import_context)
  let import_context = imports#get_import_context(imports#import_data(),
    \ 'org.springframework.stereotype.Controller')
  call imports#insert_import_context(import_context)
  let import_context = imports#get_import_context(imports#import_data(),
    \ 'org.slf4j.Logger')
  call imports#insert_import_context(import_context)
  let import_context = imports#get_import_context(imports#import_data(),
    \ 'org.slf4j.Logger')
  call imports#insert_import_context(import_context)
Expect (imports are inserted as expected):
  package current.complete.example;

  import java.util.Arrays;
  import java.util.Collections;
  import java.util.HashSet;
  import java.util.Set;

  import org.slf4j.Logger;

  import org.springframework.stereotype.Controller;

  public class CompleteClazz {
  }

Given (insert in one go example):
  package current.complete.example;

  import java.util.Arrays;
  import java.util.Collections;
  import java.util.HashSet;
  import java.util.Set;

  public class CompleteClazz {
  }

Execute (insert a new import):
  call imports#insert_import('java.util.stream.Collectors')

Expect (import inserted):
  package current.complete.example;

  import java.util.Arrays;
  import java.util.Collections;
  import java.util.HashSet;
  import java.util.Set;
  import java.util.stream.Collectors;

  public class CompleteClazz {
  }

Given (not insert new line when single import in group found):
  package current.complete.example;

  import java.util.Set;

  public class CompleteClazz {
  }
Execute(insert the import):
  call imports#insert_import('java.util.HashSet')
Expect:
  package current.complete.example;

  import java.util.HashSet;
  import java.util.Set;

  public class CompleteClazz {
  }

Given(bad sorting repeated):
  package current.complete.example;
  
  import java.util.List;
  
  import org.springframework.http.HttpEntity;¬
  import org.springframework.beans.factory.annotation.Qualifier;¬
  import org.springframework.beans.factory.annotation.Autowired;¬
  
  public class CompleteClazz {
  }
  
Execute(attempt insert dupplicate):
  call imports#insert_import('org.springframework.beans.factory.annotation.Autowired')
Expect:
  package current.complete.example;
  
  import java.util.List;
  
  import org.springframework.http.HttpEntity;¬
  import org.springframework.beans.factory.annotation.Qualifier;¬
  import org.springframework.beans.factory.annotation.Autowired;¬
  
  public class CompleteClazz {
  }
  
